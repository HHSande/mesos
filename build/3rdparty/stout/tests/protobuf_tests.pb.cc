// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf_tests.proto

#include "protobuf_tests.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace tests {
class NestedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Nested>
      _instance;
} _Nested_default_instance_;
class SimpleMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimpleMessage>
      _instance;
} _SimpleMessage_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
} _Message_default_instance_;
class ArrayMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArrayMessage>
      _instance;
} _ArrayMessage_default_instance_;
class EnumMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnumMessage>
      _instance;
} _EnumMessage_default_instance_;
class MapMessage_StringToStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToStringEntry_DoNotUse>
      _instance;
} _MapMessage_StringToStringEntry_DoNotUse_default_instance_;
class MapMessage_StringToBoolEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToBoolEntry_DoNotUse>
      _instance;
} _MapMessage_StringToBoolEntry_DoNotUse_default_instance_;
class MapMessage_StringToBytesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToBytesEntry_DoNotUse>
      _instance;
} _MapMessage_StringToBytesEntry_DoNotUse_default_instance_;
class MapMessage_StringToInt32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToInt32Entry_DoNotUse>
      _instance;
} _MapMessage_StringToInt32Entry_DoNotUse_default_instance_;
class MapMessage_StringToInt64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToInt64Entry_DoNotUse>
      _instance;
} _MapMessage_StringToInt64Entry_DoNotUse_default_instance_;
class MapMessage_StringToUint32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToUint32Entry_DoNotUse>
      _instance;
} _MapMessage_StringToUint32Entry_DoNotUse_default_instance_;
class MapMessage_StringToUint64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToUint64Entry_DoNotUse>
      _instance;
} _MapMessage_StringToUint64Entry_DoNotUse_default_instance_;
class MapMessage_StringToSint32Entry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToSint32Entry_DoNotUse>
      _instance;
} _MapMessage_StringToSint32Entry_DoNotUse_default_instance_;
class MapMessage_StringToSint64Entry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToSint64Entry_DoNotUse>
      _instance;
} _MapMessage_StringToSint64Entry_DoNotUse_default_instance_;
class MapMessage_StringToFloatEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToFloatEntry_DoNotUse>
      _instance;
} _MapMessage_StringToFloatEntry_DoNotUse_default_instance_;
class MapMessage_StringToDoubleEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToDoubleEntry_DoNotUse>
      _instance;
} _MapMessage_StringToDoubleEntry_DoNotUse_default_instance_;
class MapMessage_StringToEnumEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToEnumEntry_DoNotUse>
      _instance;
} _MapMessage_StringToEnumEntry_DoNotUse_default_instance_;
class MapMessage_StringToNestedEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_StringToNestedEntry_DoNotUse>
      _instance;
} _MapMessage_StringToNestedEntry_DoNotUse_default_instance_;
class MapMessage_BoolToStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_BoolToStringEntry_DoNotUse>
      _instance;
} _MapMessage_BoolToStringEntry_DoNotUse_default_instance_;
class MapMessage_Int32ToStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_Int32ToStringEntry_DoNotUse>
      _instance;
} _MapMessage_Int32ToStringEntry_DoNotUse_default_instance_;
class MapMessage_Int64ToStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_Int64ToStringEntry_DoNotUse>
      _instance;
} _MapMessage_Int64ToStringEntry_DoNotUse_default_instance_;
class MapMessage_Uint32ToStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_Uint32ToStringEntry_DoNotUse>
      _instance;
} _MapMessage_Uint32ToStringEntry_DoNotUse_default_instance_;
class MapMessage_Uint64ToStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_Uint64ToStringEntry_DoNotUse>
      _instance;
} _MapMessage_Uint64ToStringEntry_DoNotUse_default_instance_;
class MapMessage_Sint32ToStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_Sint32ToStringEntry_DoNotUse>
      _instance;
} _MapMessage_Sint32ToStringEntry_DoNotUse_default_instance_;
class MapMessage_Sint64ToStringEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage_Sint64ToStringEntry_DoNotUse>
      _instance;
} _MapMessage_Sint64ToStringEntry_DoNotUse_default_instance_;
class MapMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMessage>
      _instance;
} _MapMessage_default_instance_;
}  // namespace tests
namespace protobuf_protobuf_5ftests_2eproto {
void InitDefaultsNestedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_Nested_default_instance_;
    new (ptr) ::tests::Nested();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tests::Nested::InitAsDefaultInstance();
}

void InitDefaultsNested() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNestedImpl);
}

void InitDefaultsSimpleMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_SimpleMessage_default_instance_;
    new (ptr) ::tests::SimpleMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tests::SimpleMessage::InitAsDefaultInstance();
}

void InitDefaultsSimpleMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSimpleMessageImpl);
}

void InitDefaultsMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_protobuf_5ftests_2eproto::InitDefaultsNested();
  {
    void* ptr = &::tests::_Message_default_instance_;
    new (ptr) ::tests::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tests::Message::InitAsDefaultInstance();
}

void InitDefaultsMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMessageImpl);
}

void InitDefaultsArrayMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_protobuf_5ftests_2eproto::InitDefaultsSimpleMessage();
  {
    void* ptr = &::tests::_ArrayMessage_default_instance_;
    new (ptr) ::tests::ArrayMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tests::ArrayMessage::InitAsDefaultInstance();
}

void InitDefaultsArrayMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsArrayMessageImpl);
}

void InitDefaultsEnumMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_EnumMessage_default_instance_;
    new (ptr) ::tests::EnumMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tests::EnumMessage::InitAsDefaultInstance();
}

void InitDefaultsEnumMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnumMessageImpl);
}

void InitDefaultsMapMessage_StringToStringEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_StringToStringEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToStringEntry_DoNotUse();
  }
  ::tests::MapMessage_StringToStringEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToStringEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToStringEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_StringToBoolEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_StringToBoolEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToBoolEntry_DoNotUse();
  }
  ::tests::MapMessage_StringToBoolEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToBoolEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToBoolEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_StringToBytesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_StringToBytesEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToBytesEntry_DoNotUse();
  }
  ::tests::MapMessage_StringToBytesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToBytesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToBytesEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_StringToInt32Entry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_StringToInt32Entry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToInt32Entry_DoNotUse();
  }
  ::tests::MapMessage_StringToInt32Entry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToInt32Entry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToInt32Entry_DoNotUseImpl);
}

void InitDefaultsMapMessage_StringToInt64Entry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_StringToInt64Entry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToInt64Entry_DoNotUse();
  }
  ::tests::MapMessage_StringToInt64Entry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToInt64Entry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToInt64Entry_DoNotUseImpl);
}

void InitDefaultsMapMessage_StringToUint32Entry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_StringToUint32Entry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToUint32Entry_DoNotUse();
  }
  ::tests::MapMessage_StringToUint32Entry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToUint32Entry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToUint32Entry_DoNotUseImpl);
}

void InitDefaultsMapMessage_StringToUint64Entry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_StringToUint64Entry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToUint64Entry_DoNotUse();
  }
  ::tests::MapMessage_StringToUint64Entry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToUint64Entry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToUint64Entry_DoNotUseImpl);
}

void InitDefaultsMapMessage_StringToSint32Entry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_StringToSint32Entry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToSint32Entry_DoNotUse();
  }
  ::tests::MapMessage_StringToSint32Entry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToSint32Entry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToSint32Entry_DoNotUseImpl);
}

void InitDefaultsMapMessage_StringToSint64Entry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_StringToSint64Entry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToSint64Entry_DoNotUse();
  }
  ::tests::MapMessage_StringToSint64Entry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToSint64Entry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToSint64Entry_DoNotUseImpl);
}

void InitDefaultsMapMessage_StringToFloatEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_StringToFloatEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToFloatEntry_DoNotUse();
  }
  ::tests::MapMessage_StringToFloatEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToFloatEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToFloatEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_StringToDoubleEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_StringToDoubleEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToDoubleEntry_DoNotUse();
  }
  ::tests::MapMessage_StringToDoubleEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToDoubleEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToDoubleEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_StringToEnumEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_StringToEnumEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToEnumEntry_DoNotUse();
  }
  ::tests::MapMessage_StringToEnumEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToEnumEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToEnumEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_StringToNestedEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_protobuf_5ftests_2eproto::InitDefaultsNested();
  {
    void* ptr = &::tests::_MapMessage_StringToNestedEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_StringToNestedEntry_DoNotUse();
  }
  ::tests::MapMessage_StringToNestedEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_StringToNestedEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_StringToNestedEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_BoolToStringEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_BoolToStringEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_BoolToStringEntry_DoNotUse();
  }
  ::tests::MapMessage_BoolToStringEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_BoolToStringEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_BoolToStringEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_Int32ToStringEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_Int32ToStringEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_Int32ToStringEntry_DoNotUse();
  }
  ::tests::MapMessage_Int32ToStringEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_Int32ToStringEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_Int32ToStringEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_Int64ToStringEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_Int64ToStringEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_Int64ToStringEntry_DoNotUse();
  }
  ::tests::MapMessage_Int64ToStringEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_Int64ToStringEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_Int64ToStringEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_Uint32ToStringEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_Uint32ToStringEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_Uint32ToStringEntry_DoNotUse();
  }
  ::tests::MapMessage_Uint32ToStringEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_Uint32ToStringEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_Uint32ToStringEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_Uint64ToStringEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_Uint64ToStringEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_Uint64ToStringEntry_DoNotUse();
  }
  ::tests::MapMessage_Uint64ToStringEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_Uint64ToStringEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_Uint64ToStringEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_Sint32ToStringEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_Sint32ToStringEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_Sint32ToStringEntry_DoNotUse();
  }
  ::tests::MapMessage_Sint32ToStringEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_Sint32ToStringEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_Sint32ToStringEntry_DoNotUseImpl);
}

void InitDefaultsMapMessage_Sint64ToStringEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tests::_MapMessage_Sint64ToStringEntry_DoNotUse_default_instance_;
    new (ptr) ::tests::MapMessage_Sint64ToStringEntry_DoNotUse();
  }
  ::tests::MapMessage_Sint64ToStringEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMapMessage_Sint64ToStringEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessage_Sint64ToStringEntry_DoNotUseImpl);
}

void InitDefaultsMapMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToStringEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToBoolEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToBytesEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToInt32Entry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToInt64Entry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToUint32Entry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToUint64Entry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToSint32Entry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToSint64Entry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToFloatEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToDoubleEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToEnumEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_StringToNestedEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_BoolToStringEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_Int32ToStringEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_Int64ToStringEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_Uint32ToStringEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_Uint64ToStringEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_Sint32ToStringEntry_DoNotUse();
  protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage_Sint64ToStringEntry_DoNotUse();
  {
    void* ptr = &::tests::_MapMessage_default_instance_;
    new (ptr) ::tests::MapMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tests::MapMessage::InitAsDefaultInstance();
}

void InitDefaultsMapMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[26];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Nested, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Nested, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Nested, str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Nested, optional_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Nested, repeated_str_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::SimpleMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::SimpleMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::SimpleMessage, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::SimpleMessage, numbers_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, uint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, sint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, sint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, f_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, e_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, nested_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_uint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_sint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_sint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, repeated_nested_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, empty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, optional_default_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::Message, optional_no_default_),
  12,
  0,
  1,
  4,
  3,
  5,
  6,
  8,
  7,
  9,
  10,
  11,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  14,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::ArrayMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::ArrayMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::ArrayMessage, values_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::EnumMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::EnumMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::EnumMessage, e1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::EnumMessage, e2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::EnumMessage, repeated_enum_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToStringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToStringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToStringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToBoolEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToBoolEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToBoolEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToBoolEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToBytesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToBytesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToBytesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToBytesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToInt32Entry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToInt32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToInt32Entry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToInt32Entry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToInt64Entry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToInt64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToInt64Entry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToInt64Entry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToUint32Entry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToUint32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToUint32Entry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToUint32Entry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToUint64Entry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToUint64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToUint64Entry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToUint64Entry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToSint32Entry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToSint32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToSint32Entry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToSint32Entry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToSint64Entry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToSint64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToSint64Entry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToSint64Entry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToFloatEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToFloatEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToFloatEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToFloatEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToDoubleEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToDoubleEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToDoubleEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToDoubleEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToEnumEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToEnumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToEnumEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToEnumEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToNestedEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToNestedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToNestedEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_StringToNestedEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_BoolToStringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_BoolToStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_BoolToStringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_BoolToStringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Int32ToStringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Int32ToStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Int32ToStringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Int32ToStringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Int64ToStringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Int64ToStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Int64ToStringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Int64ToStringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Uint32ToStringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Uint32ToStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Uint32ToStringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Uint32ToStringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Uint64ToStringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Uint64ToStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Uint64ToStringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Uint64ToStringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Sint32ToStringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Sint32ToStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Sint32ToStringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Sint32ToStringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Sint64ToStringEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Sint64ToStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Sint64ToStringEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage_Sint64ToStringEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_uint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_sint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_sint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, string_to_nested_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, bool_to_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, int32_to_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, int64_to_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, uint32_to_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, uint64_to_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, sint32_to_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tests::MapMessage, sint64_to_string_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::tests::Nested)},
  { 11, 18, sizeof(::tests::SimpleMessage)},
  { 20, 54, sizeof(::tests::Message)},
  { 83, 89, sizeof(::tests::ArrayMessage)},
  { 90, 98, sizeof(::tests::EnumMessage)},
  { 101, 108, sizeof(::tests::MapMessage_StringToStringEntry_DoNotUse)},
  { 110, 117, sizeof(::tests::MapMessage_StringToBoolEntry_DoNotUse)},
  { 119, 126, sizeof(::tests::MapMessage_StringToBytesEntry_DoNotUse)},
  { 128, 135, sizeof(::tests::MapMessage_StringToInt32Entry_DoNotUse)},
  { 137, 144, sizeof(::tests::MapMessage_StringToInt64Entry_DoNotUse)},
  { 146, 153, sizeof(::tests::MapMessage_StringToUint32Entry_DoNotUse)},
  { 155, 162, sizeof(::tests::MapMessage_StringToUint64Entry_DoNotUse)},
  { 164, 171, sizeof(::tests::MapMessage_StringToSint32Entry_DoNotUse)},
  { 173, 180, sizeof(::tests::MapMessage_StringToSint64Entry_DoNotUse)},
  { 182, 189, sizeof(::tests::MapMessage_StringToFloatEntry_DoNotUse)},
  { 191, 198, sizeof(::tests::MapMessage_StringToDoubleEntry_DoNotUse)},
  { 200, 207, sizeof(::tests::MapMessage_StringToEnumEntry_DoNotUse)},
  { 209, 216, sizeof(::tests::MapMessage_StringToNestedEntry_DoNotUse)},
  { 218, 225, sizeof(::tests::MapMessage_BoolToStringEntry_DoNotUse)},
  { 227, 234, sizeof(::tests::MapMessage_Int32ToStringEntry_DoNotUse)},
  { 236, 243, sizeof(::tests::MapMessage_Int64ToStringEntry_DoNotUse)},
  { 245, 252, sizeof(::tests::MapMessage_Uint32ToStringEntry_DoNotUse)},
  { 254, 261, sizeof(::tests::MapMessage_Uint64ToStringEntry_DoNotUse)},
  { 263, 270, sizeof(::tests::MapMessage_Sint32ToStringEntry_DoNotUse)},
  { 272, 279, sizeof(::tests::MapMessage_Sint64ToStringEntry_DoNotUse)},
  { 281, 306, sizeof(::tests::MapMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_Nested_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_SimpleMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_ArrayMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_EnumMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToBoolEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToBytesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToInt32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToInt64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToUint32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToUint64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToSint32Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToSint64Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToFloatEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToDoubleEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToEnumEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_StringToNestedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_BoolToStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_Int32ToStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_Int64ToStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_Uint32ToStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_Uint64ToStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_Sint32ToStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_Sint64ToStringEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tests::_MapMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protobuf_tests.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 26);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024protobuf_tests.proto\022\005tests\"A\n\006Nested\022"
      "\013\n\003str\030\001 \002(\t\022\024\n\014optional_str\030\002 \001(\t\022\024\n\014re"
      "peated_str\030\003 \003(\t\",\n\rSimpleMessage\022\n\n\002id\030"
      "\001 \002(\t\022\017\n\007numbers\030\002 \003(\005\"\376\004\n\007Message\022\t\n\001b\030"
      "\032 \002(\010\022\013\n\003str\030\001 \002(\t\022\r\n\005bytes\030\002 \002(\014\022\r\n\005int"
      "32\030\003 \001(\005\022\r\n\005int64\030\004 \001(\003\022\016\n\006uint32\030\005 \001(\r\022"
      "\016\n\006uint64\030\006 \001(\004\022\016\n\006sint32\030\007 \001(\021\022\016\n\006sint6"
      "4\030\010 \001(\022\022\t\n\001f\030\t \002(\002\022\t\n\001d\030\n \002(\001\022\026\n\001e\030\013 \002(\016"
      "2\013.tests.Enum\022\035\n\006nested\030\014 \002(\0132\r.tests.Ne"
      "sted\022\025\n\rrepeated_bool\030\033 \003(\010\022\027\n\017repeated_"
      "string\030\r \003(\t\022\026\n\016repeated_bytes\030\016 \003(\014\022\026\n\016"
      "repeated_int32\030\017 \003(\005\022\026\n\016repeated_int64\030\020"
      " \003(\003\022\027\n\017repeated_uint32\030\021 \003(\r\022\027\n\017repeate"
      "d_uint64\030\022 \003(\004\022\027\n\017repeated_sint32\030\023 \003(\021\022"
      "\027\n\017repeated_sint64\030\024 \003(\022\022\026\n\016repeated_flo"
      "at\030\025 \003(\002\022\027\n\017repeated_double\030\026 \003(\001\022\"\n\rrep"
      "eated_enum\030\027 \003(\0162\013.tests.Enum\022&\n\017repeate"
      "d_nested\030\030 \003(\0132\r.tests.Nested\022\r\n\005empty\030\031"
      " \003(\t\022\034\n\020optional_default\030\034 \001(\001:\00242\022\033\n\023op"
      "tional_no_default\030\035 \001(\001\"4\n\014ArrayMessage\022"
      "$\n\006values\030\001 \003(\0132\024.tests.SimpleMessage\"c\n"
      "\013EnumMessage\022\027\n\002e1\030\001 \001(\0162\013.tests.Enum\022\027\n"
      "\002e2\030\002 \001(\0162\013.tests.Enum\022\"\n\rrepeated_enum\030"
      "\003 \003(\0162\013.tests.Enum\"\344\022\n\nMapMessage\022\?\n\020str"
      "ing_to_string\030\001 \003(\0132%.tests.MapMessage.S"
      "tringToStringEntry\022;\n\016string_to_bool\030\002 \003"
      "(\0132#.tests.MapMessage.StringToBoolEntry\022"
      "=\n\017string_to_bytes\030\003 \003(\0132$.tests.MapMess"
      "age.StringToBytesEntry\022=\n\017string_to_int3"
      "2\030\004 \003(\0132$.tests.MapMessage.StringToInt32"
      "Entry\022=\n\017string_to_int64\030\005 \003(\0132$.tests.M"
      "apMessage.StringToInt64Entry\022\?\n\020string_t"
      "o_uint32\030\006 \003(\0132%.tests.MapMessage.String"
      "ToUint32Entry\022\?\n\020string_to_uint64\030\007 \003(\0132"
      "%.tests.MapMessage.StringToUint64Entry\022\?"
      "\n\020string_to_sint32\030\010 \003(\0132%.tests.MapMess"
      "age.StringToSint32Entry\022\?\n\020string_to_sin"
      "t64\030\t \003(\0132%.tests.MapMessage.StringToSin"
      "t64Entry\022=\n\017string_to_float\030\n \003(\0132$.test"
      "s.MapMessage.StringToFloatEntry\022\?\n\020strin"
      "g_to_double\030\013 \003(\0132%.tests.MapMessage.Str"
      "ingToDoubleEntry\022;\n\016string_to_enum\030\014 \003(\013"
      "2#.tests.MapMessage.StringToEnumEntry\022\?\n"
      "\020string_to_nested\030\r \003(\0132%.tests.MapMessa"
      "ge.StringToNestedEntry\022;\n\016bool_to_string"
      "\030\016 \003(\0132#.tests.MapMessage.BoolToStringEn"
      "try\022=\n\017int32_to_string\030\017 \003(\0132$.tests.Map"
      "Message.Int32ToStringEntry\022=\n\017int64_to_s"
      "tring\030\020 \003(\0132$.tests.MapMessage.Int64ToSt"
      "ringEntry\022\?\n\020uint32_to_string\030\021 \003(\0132%.te"
      "sts.MapMessage.Uint32ToStringEntry\022\?\n\020ui"
      "nt64_to_string\030\022 \003(\0132%.tests.MapMessage."
      "Uint64ToStringEntry\022\?\n\020sint32_to_string\030"
      "\023 \003(\0132%.tests.MapMessage.Sint32ToStringE"
      "ntry\022\?\n\020sint64_to_string\030\024 \003(\0132%.tests.M"
      "apMessage.Sint64ToStringEntry\0325\n\023StringT"
      "oStringEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
      ":\0028\001\0323\n\021StringToBoolEntry\022\013\n\003key\030\001 \001(\t\022\r"
      "\n\005value\030\002 \001(\010:\0028\001\0324\n\022StringToBytesEntry\022"
      "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\0324\n\022Strin"
      "gToInt32Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
      "\005:\0028\001\0324\n\022StringToInt64Entry\022\013\n\003key\030\001 \001(\t"
      "\022\r\n\005value\030\002 \001(\003:\0028\001\0325\n\023StringToUint32Ent"
      "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\0325\n\023St"
      "ringToUint64Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
      "\002 \001(\004:\0028\001\0325\n\023StringToSint32Entry\022\013\n\003key\030"
      "\001 \001(\t\022\r\n\005value\030\002 \001(\021:\0028\001\0325\n\023StringToSint"
      "64Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\022:\0028\001\032"
      "4\n\022StringToFloatEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
      "lue\030\002 \001(\002:\0028\001\0325\n\023StringToDoubleEntry\022\013\n\003"
      "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\032@\n\021StringTo"
      "EnumEntry\022\013\n\003key\030\001 \001(\t\022\032\n\005value\030\002 \001(\0162\013."
      "tests.Enum:\0028\001\032D\n\023StringToNestedEntry\022\013\n"
      "\003key\030\001 \001(\t\022\034\n\005value\030\002 \001(\0132\r.tests.Nested"
      ":\0028\001\0323\n\021BoolToStringEntry\022\013\n\003key\030\001 \001(\010\022\r"
      "\n\005value\030\002 \001(\t:\0028\001\0324\n\022Int32ToStringEntry\022"
      "\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\0324\n\022Int64"
      "ToStringEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001("
      "\t:\0028\001\0325\n\023Uint32ToStringEntry\022\013\n\003key\030\001 \001("
      "\r\022\r\n\005value\030\002 \001(\t:\0028\001\0325\n\023Uint64ToStringEn"
      "try\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\t:\0028\001\0325\n\023S"
      "int32ToStringEntry\022\013\n\003key\030\001 \001(\021\022\r\n\005value"
      "\030\002 \001(\t:\0028\001\0325\n\023Sint64ToStringEntry\022\013\n\003key"
      "\030\001 \001(\022\022\r\n\005value\030\002 \001(\t:\0028\001*%\n\004Enum\022\013\n\007UNK"
      "NOWN\020\000\022\007\n\003ONE\020\001\022\007\n\003TWO\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3384);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuf_tests.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protobuf_5ftests_2eproto
namespace tests {
const ::google::protobuf::EnumDescriptor* Enum_descriptor() {
  protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_5ftests_2eproto::file_level_enum_descriptors[0];
}
bool Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Nested::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Nested::kStrFieldNumber;
const int Nested::kOptionalStrFieldNumber;
const int Nested::kRepeatedStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nested::Nested()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protobuf_5ftests_2eproto::InitDefaultsNested();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tests.Nested)
}
Nested::Nested(const Nested& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      repeated_str_(from.repeated_str_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str()) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  optional_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_optional_str()) {
    optional_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_str_);
  }
  // @@protoc_insertion_point(copy_constructor:tests.Nested)
}

void Nested::SharedCtor() {
  _cached_size_ = 0;
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Nested::~Nested() {
  // @@protoc_insertion_point(destructor:tests.Nested)
  SharedDtor();
}

void Nested::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optional_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Nested::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Nested::descriptor() {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Nested& Nested::default_instance() {
  ::protobuf_protobuf_5ftests_2eproto::InitDefaultsNested();
  return *internal_default_instance();
}

Nested* Nested::New(::google::protobuf::Arena* arena) const {
  Nested* n = new Nested;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Nested::Clear() {
// @@protoc_insertion_point(message_clear_start:tests.Nested)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_str_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*str_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!optional_str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*optional_str_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Nested::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tests.Nested)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), static_cast<int>(this->str().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.Nested.str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string optional_str = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optional_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->optional_str().data(), static_cast<int>(this->optional_str().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.Nested.optional_str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string repeated_str = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_repeated_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->repeated_str(this->repeated_str_size() - 1).data(),
            static_cast<int>(this->repeated_str(this->repeated_str_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.Nested.repeated_str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tests.Nested)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tests.Nested)
  return false;
#undef DO_
}

void Nested::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tests.Nested)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string str = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.Nested.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  // optional string optional_str = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->optional_str().data(), static_cast<int>(this->optional_str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.Nested.optional_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->optional_str(), output);
  }

  // repeated string repeated_str = 3;
  for (int i = 0, n = this->repeated_str_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->repeated_str(i).data(), static_cast<int>(this->repeated_str(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.Nested.repeated_str");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->repeated_str(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tests.Nested)
}

::google::protobuf::uint8* Nested::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tests.Nested)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string str = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.Nested.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  // optional string optional_str = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->optional_str().data(), static_cast<int>(this->optional_str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.Nested.optional_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->optional_str(), target);
  }

  // repeated string repeated_str = 3;
  for (int i = 0, n = this->repeated_str_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->repeated_str(i).data(), static_cast<int>(this->repeated_str(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.Nested.repeated_str");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->repeated_str(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tests.Nested)
  return target;
}

size_t Nested::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tests.Nested)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string str = 1;
  if (has_str()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());
  }
  // repeated string repeated_str = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->repeated_str_size());
  for (int i = 0, n = this->repeated_str_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->repeated_str(i));
  }

  // optional string optional_str = 2;
  if (has_optional_str()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optional_str());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Nested::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tests.Nested)
  GOOGLE_DCHECK_NE(&from, this);
  const Nested* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Nested>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tests.Nested)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tests.Nested)
    MergeFrom(*source);
  }
}

void Nested::MergeFrom(const Nested& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tests.Nested)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_str_.MergeFrom(from.repeated_str_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_str();
      str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_optional_str();
      optional_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optional_str_);
    }
  }
}

void Nested::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tests.Nested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nested::CopyFrom(const Nested& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tests.Nested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nested::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Nested::Swap(Nested* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Nested::InternalSwap(Nested* other) {
  using std::swap;
  repeated_str_.InternalSwap(&other->repeated_str_);
  str_.Swap(&other->str_);
  optional_str_.Swap(&other->optional_str_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Nested::GetMetadata() const {
  protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SimpleMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleMessage::kIdFieldNumber;
const int SimpleMessage::kNumbersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleMessage::SimpleMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protobuf_5ftests_2eproto::InitDefaultsSimpleMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tests.SimpleMessage)
}
SimpleMessage::SimpleMessage(const SimpleMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      numbers_(from.numbers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:tests.SimpleMessage)
}

void SimpleMessage::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SimpleMessage::~SimpleMessage() {
  // @@protoc_insertion_point(destructor:tests.SimpleMessage)
  SharedDtor();
}

void SimpleMessage::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SimpleMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleMessage::descriptor() {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimpleMessage& SimpleMessage::default_instance() {
  ::protobuf_protobuf_5ftests_2eproto::InitDefaultsSimpleMessage();
  return *internal_default_instance();
}

SimpleMessage* SimpleMessage::New(::google::protobuf::Arena* arena) const {
  SimpleMessage* n = new SimpleMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tests.SimpleMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numbers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimpleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tests.SimpleMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.SimpleMessage.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 numbers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_numbers())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_numbers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tests.SimpleMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tests.SimpleMessage)
  return false;
#undef DO_
}

void SimpleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tests.SimpleMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.SimpleMessage.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated int32 numbers = 2;
  for (int i = 0, n = this->numbers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->numbers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tests.SimpleMessage)
}

::google::protobuf::uint8* SimpleMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tests.SimpleMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.SimpleMessage.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated int32 numbers = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->numbers_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tests.SimpleMessage)
  return target;
}

size_t SimpleMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tests.SimpleMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  // repeated int32 numbers = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->numbers_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->numbers_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tests.SimpleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tests.SimpleMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tests.SimpleMessage)
    MergeFrom(*source);
  }
}

void SimpleMessage::MergeFrom(const SimpleMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tests.SimpleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  numbers_.MergeFrom(from.numbers_);
  if (from.has_id()) {
    set_has_id();
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void SimpleMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tests.SimpleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMessage::CopyFrom(const SimpleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tests.SimpleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SimpleMessage::Swap(SimpleMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleMessage::InternalSwap(SimpleMessage* other) {
  using std::swap;
  numbers_.InternalSwap(&other->numbers_);
  id_.Swap(&other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleMessage::GetMetadata() const {
  protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::tests::_Message_default_instance_._instance.get_mutable()->nested_ = const_cast< ::tests::Nested*>(
      ::tests::Nested::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kBFieldNumber;
const int Message::kStrFieldNumber;
const int Message::kBytesFieldNumber;
const int Message::kInt32FieldNumber;
const int Message::kInt64FieldNumber;
const int Message::kUint32FieldNumber;
const int Message::kUint64FieldNumber;
const int Message::kSint32FieldNumber;
const int Message::kSint64FieldNumber;
const int Message::kFFieldNumber;
const int Message::kDFieldNumber;
const int Message::kEFieldNumber;
const int Message::kNestedFieldNumber;
const int Message::kRepeatedBoolFieldNumber;
const int Message::kRepeatedStringFieldNumber;
const int Message::kRepeatedBytesFieldNumber;
const int Message::kRepeatedInt32FieldNumber;
const int Message::kRepeatedInt64FieldNumber;
const int Message::kRepeatedUint32FieldNumber;
const int Message::kRepeatedUint64FieldNumber;
const int Message::kRepeatedSint32FieldNumber;
const int Message::kRepeatedSint64FieldNumber;
const int Message::kRepeatedFloatFieldNumber;
const int Message::kRepeatedDoubleFieldNumber;
const int Message::kRepeatedEnumFieldNumber;
const int Message::kRepeatedNestedFieldNumber;
const int Message::kEmptyFieldNumber;
const int Message::kOptionalDefaultFieldNumber;
const int Message::kOptionalNoDefaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protobuf_5ftests_2eproto::InitDefaultsMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tests.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_sint32_(from.repeated_sint32_),
      repeated_sint64_(from.repeated_sint64_),
      repeated_float_(from.repeated_float_),
      repeated_double_(from.repeated_double_),
      repeated_enum_(from.repeated_enum_),
      repeated_nested_(from.repeated_nested_),
      empty_(from.empty_),
      repeated_bool_(from.repeated_bool_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_str()) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bytes()) {
    bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bytes_);
  }
  if (from.has_nested()) {
    nested_ = new ::tests::Nested(*from.nested_);
  } else {
    nested_ = NULL;
  }
  ::memcpy(&int64_, &from.int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_default_) -
    reinterpret_cast<char*>(&int64_)) + sizeof(optional_default_));
  // @@protoc_insertion_point(copy_constructor:tests.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nested_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_no_default_) -
      reinterpret_cast<char*>(&nested_)) + sizeof(optional_no_default_));
  optional_default_ = 42;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:tests.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nested_;
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  ::protobuf_protobuf_5ftests_2eproto::InitDefaultsMessage();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:tests.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_sint32_.Clear();
  repeated_sint64_.Clear();
  repeated_float_.Clear();
  repeated_double_.Clear();
  repeated_enum_.Clear();
  repeated_nested_.Clear();
  empty_.Clear();
  repeated_bool_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*str_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!bytes_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bytes_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(nested_ != NULL);
      nested_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&int64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sint64_) -
        reinterpret_cast<char*>(&int64_)) + sizeof(sint64_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&sint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_no_default_) -
        reinterpret_cast<char*>(&sint32_)) + sizeof(optional_no_default_));
    optional_default_ = 42;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tests.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), static_cast<int>(this->str().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.Message.str");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 int32 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_int32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 int64 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_int64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uint32 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_uint32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uint64 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_uint64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 sint32 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sint32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 sint64 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_sint64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float f = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_f();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double d = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .tests.Enum e = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tests::Enum_IsValid(value)) {
            set_e(static_cast< ::tests::Enum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .tests.Nested nested = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nested()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string repeated_string = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_repeated_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->repeated_string(this->repeated_string_size() - 1).data(),
            static_cast<int>(this->repeated_string(this->repeated_string_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.Message.repeated_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes repeated_bytes = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_repeated_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 repeated_int32 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120u, input, this->mutable_repeated_int32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_repeated_int32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 repeated_int64 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 128u, input, this->mutable_repeated_int64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_repeated_int64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 repeated_uint32 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136u, input, this->mutable_repeated_uint32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_repeated_uint32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 repeated_uint64 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 144u, input, this->mutable_repeated_uint64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_repeated_uint64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 repeated_sint32 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 152u, input, this->mutable_repeated_sint32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_repeated_sint32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint64 repeated_sint64 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 2, 160u, input, this->mutable_repeated_sint64())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_repeated_sint64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float repeated_float = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 173u, input, this->mutable_repeated_float())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_repeated_float())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double repeated_double = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 177u, input, this->mutable_repeated_double())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_repeated_double())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tests.Enum repeated_enum = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tests::Enum_IsValid(value)) {
            add_repeated_enum(static_cast< ::tests::Enum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 23,
                 ::tests::Enum_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_repeated_enum())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tests.Nested repeated_nested = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_repeated_nested()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string empty = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_empty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->empty(this->empty_size() - 1).data(),
            static_cast<int>(this->empty(this->empty_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.Message.empty");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool b = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool repeated_bool = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 216u, input, this->mutable_repeated_bool())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_repeated_bool())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double optional_default = 28 [default = 42];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {
          set_has_optional_default();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optional_default_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double optional_no_default = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {
          set_has_optional_no_default();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &optional_no_default_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tests.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tests.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tests.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string str = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.Message.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str(), output);
  }

  // required bytes bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bytes(), output);
  }

  // optional int32 int32 = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int32(), output);
  }

  // optional int64 int64 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int64(), output);
  }

  // optional uint32 uint32 = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uint32(), output);
  }

  // optional uint64 uint64 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->uint64(), output);
  }

  // optional sint32 sint32 = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->sint32(), output);
  }

  // optional sint64 sint64 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(8, this->sint64(), output);
  }

  // required float f = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->f(), output);
  }

  // required double d = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->d(), output);
  }

  // required .tests.Enum e = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->e(), output);
  }

  // required .tests.Nested nested = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->nested_, output);
  }

  // repeated string repeated_string = 13;
  for (int i = 0, n = this->repeated_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->repeated_string(i).data(), static_cast<int>(this->repeated_string(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.Message.repeated_string");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->repeated_string(i), output);
  }

  // repeated bytes repeated_bytes = 14;
  for (int i = 0, n = this->repeated_bytes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->repeated_bytes(i), output);
  }

  // repeated int32 repeated_int32 = 15;
  for (int i = 0, n = this->repeated_int32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->repeated_int32(i), output);
  }

  // repeated int64 repeated_int64 = 16;
  for (int i = 0, n = this->repeated_int64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      16, this->repeated_int64(i), output);
  }

  // repeated uint32 repeated_uint32 = 17;
  for (int i = 0, n = this->repeated_uint32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->repeated_uint32(i), output);
  }

  // repeated uint64 repeated_uint64 = 18;
  for (int i = 0, n = this->repeated_uint64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      18, this->repeated_uint64(i), output);
  }

  // repeated sint32 repeated_sint32 = 19;
  for (int i = 0, n = this->repeated_sint32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      19, this->repeated_sint32(i), output);
  }

  // repeated sint64 repeated_sint64 = 20;
  for (int i = 0, n = this->repeated_sint64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      20, this->repeated_sint64(i), output);
  }

  // repeated float repeated_float = 21;
  for (int i = 0, n = this->repeated_float_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      21, this->repeated_float(i), output);
  }

  // repeated double repeated_double = 22;
  for (int i = 0, n = this->repeated_double_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      22, this->repeated_double(i), output);
  }

  // repeated .tests.Enum repeated_enum = 23;
  for (int i = 0, n = this->repeated_enum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->repeated_enum(i), output);
  }

  // repeated .tests.Nested repeated_nested = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_nested_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->repeated_nested(static_cast<int>(i)), output);
  }

  // repeated string empty = 25;
  for (int i = 0, n = this->empty_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->empty(i).data(), static_cast<int>(this->empty(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.Message.empty");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->empty(i), output);
  }

  // required bool b = 26;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->b(), output);
  }

  // repeated bool repeated_bool = 27;
  for (int i = 0, n = this->repeated_bool_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      27, this->repeated_bool(i), output);
  }

  // optional double optional_default = 28 [default = 42];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->optional_default(), output);
  }

  // optional double optional_no_default = 29;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->optional_no_default(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tests.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tests.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string str = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.Message.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }

  // required bytes bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bytes(), target);
  }

  // optional int32 int32 = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int32(), target);
  }

  // optional int64 int64 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->int64(), target);
  }

  // optional uint32 uint32 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uint32(), target);
  }

  // optional uint64 uint64 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->uint64(), target);
  }

  // optional sint32 sint32 = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->sint32(), target);
  }

  // optional sint64 sint64 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(8, this->sint64(), target);
  }

  // required float f = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->f(), target);
  }

  // required double d = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->d(), target);
  }

  // required .tests.Enum e = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->e(), target);
  }

  // required .tests.Nested nested = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->nested_, deterministic, target);
  }

  // repeated string repeated_string = 13;
  for (int i = 0, n = this->repeated_string_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->repeated_string(i).data(), static_cast<int>(this->repeated_string(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.Message.repeated_string");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->repeated_string(i), target);
  }

  // repeated bytes repeated_bytes = 14;
  for (int i = 0, n = this->repeated_bytes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(14, this->repeated_bytes(i), target);
  }

  // repeated int32 repeated_int32 = 15;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(15, this->repeated_int32_, target);

  // repeated int64 repeated_int64 = 16;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(16, this->repeated_int64_, target);

  // repeated uint32 repeated_uint32 = 17;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(17, this->repeated_uint32_, target);

  // repeated uint64 repeated_uint64 = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(18, this->repeated_uint64_, target);

  // repeated sint32 repeated_sint32 = 19;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt32ToArray(19, this->repeated_sint32_, target);

  // repeated sint64 repeated_sint64 = 20;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteSInt64ToArray(20, this->repeated_sint64_, target);

  // repeated float repeated_float = 21;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(21, this->repeated_float_, target);

  // repeated double repeated_double = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(22, this->repeated_double_, target);

  // repeated .tests.Enum repeated_enum = 23;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    23, this->repeated_enum_, target);

  // repeated .tests.Nested repeated_nested = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->repeated_nested_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->repeated_nested(static_cast<int>(i)), deterministic, target);
  }

  // repeated string empty = 25;
  for (int i = 0, n = this->empty_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->empty(i).data(), static_cast<int>(this->empty(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tests.Message.empty");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(25, this->empty(i), target);
  }

  // required bool b = 26;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->b(), target);
  }

  // repeated bool repeated_bool = 27;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(27, this->repeated_bool_, target);

  // optional double optional_default = 28 [default = 42];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->optional_default(), target);
  }

  // optional double optional_no_default = 29;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->optional_no_default(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tests.Message)
  return target;
}

size_t Message::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tests.Message)
  size_t total_size = 0;

  if (has_str()) {
    // required string str = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());
  }

  if (has_bytes()) {
    // required bytes bytes = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytes());
  }

  if (has_nested()) {
    // required .tests.Nested nested = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->nested_);
  }

  if (has_f()) {
    // required float f = 9;
    total_size += 1 + 4;
  }

  if (has_d()) {
    // required double d = 10;
    total_size += 1 + 8;
  }

  if (has_e()) {
    // required .tests.Enum e = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->e());
  }

  if (has_b()) {
    // required bool b = 26;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tests.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001e07) ^ 0x00001e07) == 0) {  // All required fields are present.
    // required string str = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());

    // required bytes bytes = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytes());

    // required .tests.Nested nested = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->nested_);

    // required float f = 9;
    total_size += 1 + 4;

    // required double d = 10;
    total_size += 1 + 8;

    // required .tests.Enum e = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->e());

    // required bool b = 26;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string repeated_string = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->repeated_string_size());
  for (int i = 0, n = this->repeated_string_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->repeated_string(i));
  }

  // repeated bytes repeated_bytes = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->repeated_bytes_size());
  for (int i = 0, n = this->repeated_bytes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->repeated_bytes(i));
  }

  // repeated int32 repeated_int32 = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->repeated_int32_size());
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 16;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->repeated_int64_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->repeated_int64_size());
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 17;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->repeated_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->repeated_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 repeated_sint32 = 19;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->repeated_sint32_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->repeated_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 repeated_sint64 = 20;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt64Size(this->repeated_sint64_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->repeated_sint64_size());
    total_size += data_size;
  }

  // repeated float repeated_float = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->repeated_float_size());
    total_size += data_size;
  }

  // repeated double repeated_double = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->repeated_double_size());
    total_size += data_size;
  }

  // repeated .tests.Enum repeated_enum = 23;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->repeated_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->repeated_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .tests.Nested repeated_nested = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_nested_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->repeated_nested(static_cast<int>(i)));
    }
  }

  // repeated string empty = 25;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->empty_size());
  for (int i = 0, n = this->empty_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->empty(i));
  }

  // repeated bool repeated_bool = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->repeated_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->repeated_bool_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional int64 int64 = 4;
    if (has_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64());
    }

    // optional int32 int32 = 3;
    if (has_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32());
    }

    // optional uint32 uint32 = 5;
    if (has_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32());
    }

    // optional uint64 uint64 = 6;
    if (has_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64());
    }

    // optional sint64 sint64 = 8;
    if (has_sint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint64());
    }

  }
  // optional sint32 sint32 = 7;
  if (has_sint32()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->sint32());
  }

  if (_has_bits_[8 / 32] & 24576u) {
    // optional double optional_no_default = 29;
    if (has_optional_no_default()) {
      total_size += 2 + 8;
    }

    // optional double optional_default = 28 [default = 42];
    if (has_optional_default()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tests.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tests.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tests.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tests.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_sint32_.MergeFrom(from.repeated_sint32_);
  repeated_sint64_.MergeFrom(from.repeated_sint64_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_enum_.MergeFrom(from.repeated_enum_);
  repeated_nested_.MergeFrom(from.repeated_nested_);
  empty_.MergeFrom(from.empty_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_str();
      str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bytes();
      bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bytes_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_nested()->::tests::Nested::MergeFrom(from.nested());
    }
    if (cached_has_bits & 0x00000008u) {
      int64_ = from.int64_;
    }
    if (cached_has_bits & 0x00000010u) {
      int32_ = from.int32_;
    }
    if (cached_has_bits & 0x00000020u) {
      uint32_ = from.uint32_;
    }
    if (cached_has_bits & 0x00000040u) {
      uint64_ = from.uint64_;
    }
    if (cached_has_bits & 0x00000080u) {
      sint64_ = from.sint64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      sint32_ = from.sint32_;
    }
    if (cached_has_bits & 0x00000200u) {
      f_ = from.f_;
    }
    if (cached_has_bits & 0x00000400u) {
      d_ = from.d_;
    }
    if (cached_has_bits & 0x00000800u) {
      e_ = from.e_;
    }
    if (cached_has_bits & 0x00001000u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00002000u) {
      optional_no_default_ = from.optional_no_default_;
    }
    if (cached_has_bits & 0x00004000u) {
      optional_default_ = from.optional_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tests.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tests.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001e07) != 0x00001e07) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->repeated_nested())) return false;
  if (has_nested()) {
    if (!this->nested_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  repeated_string_.InternalSwap(&other->repeated_string_);
  repeated_bytes_.InternalSwap(&other->repeated_bytes_);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_sint32_.InternalSwap(&other->repeated_sint32_);
  repeated_sint64_.InternalSwap(&other->repeated_sint64_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_enum_.InternalSwap(&other->repeated_enum_);
  repeated_nested_.InternalSwap(&other->repeated_nested_);
  empty_.InternalSwap(&other->empty_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  str_.Swap(&other->str_);
  bytes_.Swap(&other->bytes_);
  swap(nested_, other->nested_);
  swap(int64_, other->int64_);
  swap(int32_, other->int32_);
  swap(uint32_, other->uint32_);
  swap(uint64_, other->uint64_);
  swap(sint64_, other->sint64_);
  swap(sint32_, other->sint32_);
  swap(f_, other->f_);
  swap(d_, other->d_);
  swap(e_, other->e_);
  swap(b_, other->b_);
  swap(optional_no_default_, other->optional_no_default_);
  swap(optional_default_, other->optional_default_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ArrayMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArrayMessage::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArrayMessage::ArrayMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protobuf_5ftests_2eproto::InitDefaultsArrayMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tests.ArrayMessage)
}
ArrayMessage::ArrayMessage(const ArrayMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tests.ArrayMessage)
}

void ArrayMessage::SharedCtor() {
  _cached_size_ = 0;
}

ArrayMessage::~ArrayMessage() {
  // @@protoc_insertion_point(destructor:tests.ArrayMessage)
  SharedDtor();
}

void ArrayMessage::SharedDtor() {
}

void ArrayMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArrayMessage::descriptor() {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArrayMessage& ArrayMessage::default_instance() {
  ::protobuf_protobuf_5ftests_2eproto::InitDefaultsArrayMessage();
  return *internal_default_instance();
}

ArrayMessage* ArrayMessage::New(::google::protobuf::Arena* arena) const {
  ArrayMessage* n = new ArrayMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ArrayMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tests.ArrayMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ArrayMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tests.ArrayMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tests.SimpleMessage values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tests.ArrayMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tests.ArrayMessage)
  return false;
#undef DO_
}

void ArrayMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tests.ArrayMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tests.SimpleMessage values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tests.ArrayMessage)
}

::google::protobuf::uint8* ArrayMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tests.ArrayMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tests.SimpleMessage values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->values(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tests.ArrayMessage)
  return target;
}

size_t ArrayMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tests.ArrayMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tests.SimpleMessage values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->values(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArrayMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tests.ArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArrayMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tests.ArrayMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tests.ArrayMessage)
    MergeFrom(*source);
  }
}

void ArrayMessage::MergeFrom(const ArrayMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tests.ArrayMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ArrayMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tests.ArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayMessage::CopyFrom(const ArrayMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tests.ArrayMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayMessage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->values())) return false;
  return true;
}

void ArrayMessage::Swap(ArrayMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArrayMessage::InternalSwap(ArrayMessage* other) {
  using std::swap;
  values_.InternalSwap(&other->values_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ArrayMessage::GetMetadata() const {
  protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnumMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnumMessage::kE1FieldNumber;
const int EnumMessage::kE2FieldNumber;
const int EnumMessage::kRepeatedEnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnumMessage::EnumMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protobuf_5ftests_2eproto::InitDefaultsEnumMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tests.EnumMessage)
}
EnumMessage::EnumMessage(const EnumMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      repeated_enum_(from.repeated_enum_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&e1_, &from.e1_,
    static_cast<size_t>(reinterpret_cast<char*>(&e2_) -
    reinterpret_cast<char*>(&e1_)) + sizeof(e2_));
  // @@protoc_insertion_point(copy_constructor:tests.EnumMessage)
}

void EnumMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&e1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e2_) -
      reinterpret_cast<char*>(&e1_)) + sizeof(e2_));
}

EnumMessage::~EnumMessage() {
  // @@protoc_insertion_point(destructor:tests.EnumMessage)
  SharedDtor();
}

void EnumMessage::SharedDtor() {
}

void EnumMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnumMessage::descriptor() {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnumMessage& EnumMessage::default_instance() {
  ::protobuf_protobuf_5ftests_2eproto::InitDefaultsEnumMessage();
  return *internal_default_instance();
}

EnumMessage* EnumMessage::New(::google::protobuf::Arena* arena) const {
  EnumMessage* n = new EnumMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnumMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tests.EnumMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_enum_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&e1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&e2_) -
        reinterpret_cast<char*>(&e1_)) + sizeof(e2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnumMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tests.EnumMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tests.Enum e1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tests::Enum_IsValid(value)) {
            set_e1(static_cast< ::tests::Enum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tests.Enum e2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tests::Enum_IsValid(value)) {
            set_e2(static_cast< ::tests::Enum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tests.Enum repeated_enum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tests::Enum_IsValid(value)) {
            add_repeated_enum(static_cast< ::tests::Enum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::tests::Enum_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_repeated_enum())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tests.EnumMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tests.EnumMessage)
  return false;
#undef DO_
}

void EnumMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tests.EnumMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tests.Enum e1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->e1(), output);
  }

  // optional .tests.Enum e2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->e2(), output);
  }

  // repeated .tests.Enum repeated_enum = 3;
  for (int i = 0, n = this->repeated_enum_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->repeated_enum(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tests.EnumMessage)
}

::google::protobuf::uint8* EnumMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tests.EnumMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tests.Enum e1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->e1(), target);
  }

  // optional .tests.Enum e2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->e2(), target);
  }

  // repeated .tests.Enum repeated_enum = 3;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    3, this->repeated_enum_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tests.EnumMessage)
  return target;
}

size_t EnumMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tests.EnumMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .tests.Enum repeated_enum = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->repeated_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->repeated_enum(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .tests.Enum e1 = 1;
    if (has_e1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->e1());
    }

    // optional .tests.Enum e2 = 2;
    if (has_e2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->e2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnumMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tests.EnumMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnumMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tests.EnumMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tests.EnumMessage)
    MergeFrom(*source);
  }
}

void EnumMessage::MergeFrom(const EnumMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tests.EnumMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_enum_.MergeFrom(from.repeated_enum_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      e1_ = from.e1_;
    }
    if (cached_has_bits & 0x00000002u) {
      e2_ = from.e2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnumMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tests.EnumMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumMessage::CopyFrom(const EnumMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tests.EnumMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumMessage::IsInitialized() const {
  return true;
}

void EnumMessage::Swap(EnumMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnumMessage::InternalSwap(EnumMessage* other) {
  using std::swap;
  repeated_enum_.InternalSwap(&other->repeated_enum_);
  swap(e1_, other->e1_);
  swap(e2_, other->e2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnumMessage::GetMetadata() const {
  protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

MapMessage_StringToStringEntry_DoNotUse::MapMessage_StringToStringEntry_DoNotUse() {}
MapMessage_StringToStringEntry_DoNotUse::MapMessage_StringToStringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToStringEntry_DoNotUse::MergeFrom(const MapMessage_StringToStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToStringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[5];
}
void MapMessage_StringToStringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_StringToBoolEntry_DoNotUse::MapMessage_StringToBoolEntry_DoNotUse() {}
MapMessage_StringToBoolEntry_DoNotUse::MapMessage_StringToBoolEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToBoolEntry_DoNotUse::MergeFrom(const MapMessage_StringToBoolEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToBoolEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[6];
}
void MapMessage_StringToBoolEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_StringToBytesEntry_DoNotUse::MapMessage_StringToBytesEntry_DoNotUse() {}
MapMessage_StringToBytesEntry_DoNotUse::MapMessage_StringToBytesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToBytesEntry_DoNotUse::MergeFrom(const MapMessage_StringToBytesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToBytesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[7];
}
void MapMessage_StringToBytesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_StringToInt32Entry_DoNotUse::MapMessage_StringToInt32Entry_DoNotUse() {}
MapMessage_StringToInt32Entry_DoNotUse::MapMessage_StringToInt32Entry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToInt32Entry_DoNotUse::MergeFrom(const MapMessage_StringToInt32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToInt32Entry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[8];
}
void MapMessage_StringToInt32Entry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_StringToInt64Entry_DoNotUse::MapMessage_StringToInt64Entry_DoNotUse() {}
MapMessage_StringToInt64Entry_DoNotUse::MapMessage_StringToInt64Entry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToInt64Entry_DoNotUse::MergeFrom(const MapMessage_StringToInt64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToInt64Entry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[9];
}
void MapMessage_StringToInt64Entry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_StringToUint32Entry_DoNotUse::MapMessage_StringToUint32Entry_DoNotUse() {}
MapMessage_StringToUint32Entry_DoNotUse::MapMessage_StringToUint32Entry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToUint32Entry_DoNotUse::MergeFrom(const MapMessage_StringToUint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToUint32Entry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[10];
}
void MapMessage_StringToUint32Entry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_StringToUint64Entry_DoNotUse::MapMessage_StringToUint64Entry_DoNotUse() {}
MapMessage_StringToUint64Entry_DoNotUse::MapMessage_StringToUint64Entry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToUint64Entry_DoNotUse::MergeFrom(const MapMessage_StringToUint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToUint64Entry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[11];
}
void MapMessage_StringToUint64Entry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_StringToSint32Entry_DoNotUse::MapMessage_StringToSint32Entry_DoNotUse() {}
MapMessage_StringToSint32Entry_DoNotUse::MapMessage_StringToSint32Entry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToSint32Entry_DoNotUse::MergeFrom(const MapMessage_StringToSint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToSint32Entry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[12];
}
void MapMessage_StringToSint32Entry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_StringToSint64Entry_DoNotUse::MapMessage_StringToSint64Entry_DoNotUse() {}
MapMessage_StringToSint64Entry_DoNotUse::MapMessage_StringToSint64Entry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToSint64Entry_DoNotUse::MergeFrom(const MapMessage_StringToSint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToSint64Entry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[13];
}
void MapMessage_StringToSint64Entry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_StringToFloatEntry_DoNotUse::MapMessage_StringToFloatEntry_DoNotUse() {}
MapMessage_StringToFloatEntry_DoNotUse::MapMessage_StringToFloatEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToFloatEntry_DoNotUse::MergeFrom(const MapMessage_StringToFloatEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToFloatEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[14];
}
void MapMessage_StringToFloatEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_StringToDoubleEntry_DoNotUse::MapMessage_StringToDoubleEntry_DoNotUse() {}
MapMessage_StringToDoubleEntry_DoNotUse::MapMessage_StringToDoubleEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToDoubleEntry_DoNotUse::MergeFrom(const MapMessage_StringToDoubleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToDoubleEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[15];
}
void MapMessage_StringToDoubleEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_StringToEnumEntry_DoNotUse::MapMessage_StringToEnumEntry_DoNotUse() {}
MapMessage_StringToEnumEntry_DoNotUse::MapMessage_StringToEnumEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToEnumEntry_DoNotUse::MergeFrom(const MapMessage_StringToEnumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToEnumEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[16];
}
void MapMessage_StringToEnumEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_StringToNestedEntry_DoNotUse::MapMessage_StringToNestedEntry_DoNotUse() {}
MapMessage_StringToNestedEntry_DoNotUse::MapMessage_StringToNestedEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_StringToNestedEntry_DoNotUse::MergeFrom(const MapMessage_StringToNestedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_StringToNestedEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[17];
}
void MapMessage_StringToNestedEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_BoolToStringEntry_DoNotUse::MapMessage_BoolToStringEntry_DoNotUse() {}
MapMessage_BoolToStringEntry_DoNotUse::MapMessage_BoolToStringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_BoolToStringEntry_DoNotUse::MergeFrom(const MapMessage_BoolToStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_BoolToStringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[18];
}
void MapMessage_BoolToStringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_Int32ToStringEntry_DoNotUse::MapMessage_Int32ToStringEntry_DoNotUse() {}
MapMessage_Int32ToStringEntry_DoNotUse::MapMessage_Int32ToStringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_Int32ToStringEntry_DoNotUse::MergeFrom(const MapMessage_Int32ToStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_Int32ToStringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[19];
}
void MapMessage_Int32ToStringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_Int64ToStringEntry_DoNotUse::MapMessage_Int64ToStringEntry_DoNotUse() {}
MapMessage_Int64ToStringEntry_DoNotUse::MapMessage_Int64ToStringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_Int64ToStringEntry_DoNotUse::MergeFrom(const MapMessage_Int64ToStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_Int64ToStringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[20];
}
void MapMessage_Int64ToStringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_Uint32ToStringEntry_DoNotUse::MapMessage_Uint32ToStringEntry_DoNotUse() {}
MapMessage_Uint32ToStringEntry_DoNotUse::MapMessage_Uint32ToStringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_Uint32ToStringEntry_DoNotUse::MergeFrom(const MapMessage_Uint32ToStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_Uint32ToStringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[21];
}
void MapMessage_Uint32ToStringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_Uint64ToStringEntry_DoNotUse::MapMessage_Uint64ToStringEntry_DoNotUse() {}
MapMessage_Uint64ToStringEntry_DoNotUse::MapMessage_Uint64ToStringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_Uint64ToStringEntry_DoNotUse::MergeFrom(const MapMessage_Uint64ToStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_Uint64ToStringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[22];
}
void MapMessage_Uint64ToStringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_Sint32ToStringEntry_DoNotUse::MapMessage_Sint32ToStringEntry_DoNotUse() {}
MapMessage_Sint32ToStringEntry_DoNotUse::MapMessage_Sint32ToStringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_Sint32ToStringEntry_DoNotUse::MergeFrom(const MapMessage_Sint32ToStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_Sint32ToStringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[23];
}
void MapMessage_Sint32ToStringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MapMessage_Sint64ToStringEntry_DoNotUse::MapMessage_Sint64ToStringEntry_DoNotUse() {}
MapMessage_Sint64ToStringEntry_DoNotUse::MapMessage_Sint64ToStringEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMessage_Sint64ToStringEntry_DoNotUse::MergeFrom(const MapMessage_Sint64ToStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMessage_Sint64ToStringEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[24];
}
void MapMessage_Sint64ToStringEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void MapMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapMessage::kStringToStringFieldNumber;
const int MapMessage::kStringToBoolFieldNumber;
const int MapMessage::kStringToBytesFieldNumber;
const int MapMessage::kStringToInt32FieldNumber;
const int MapMessage::kStringToInt64FieldNumber;
const int MapMessage::kStringToUint32FieldNumber;
const int MapMessage::kStringToUint64FieldNumber;
const int MapMessage::kStringToSint32FieldNumber;
const int MapMessage::kStringToSint64FieldNumber;
const int MapMessage::kStringToFloatFieldNumber;
const int MapMessage::kStringToDoubleFieldNumber;
const int MapMessage::kStringToEnumFieldNumber;
const int MapMessage::kStringToNestedFieldNumber;
const int MapMessage::kBoolToStringFieldNumber;
const int MapMessage::kInt32ToStringFieldNumber;
const int MapMessage::kInt64ToStringFieldNumber;
const int MapMessage::kUint32ToStringFieldNumber;
const int MapMessage::kUint64ToStringFieldNumber;
const int MapMessage::kSint32ToStringFieldNumber;
const int MapMessage::kSint64ToStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapMessage::MapMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tests.MapMessage)
}
MapMessage::MapMessage(const MapMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_to_string_.MergeFrom(from.string_to_string_);
  string_to_bool_.MergeFrom(from.string_to_bool_);
  string_to_bytes_.MergeFrom(from.string_to_bytes_);
  string_to_int32_.MergeFrom(from.string_to_int32_);
  string_to_int64_.MergeFrom(from.string_to_int64_);
  string_to_uint32_.MergeFrom(from.string_to_uint32_);
  string_to_uint64_.MergeFrom(from.string_to_uint64_);
  string_to_sint32_.MergeFrom(from.string_to_sint32_);
  string_to_sint64_.MergeFrom(from.string_to_sint64_);
  string_to_float_.MergeFrom(from.string_to_float_);
  string_to_double_.MergeFrom(from.string_to_double_);
  string_to_enum_.MergeFrom(from.string_to_enum_);
  string_to_nested_.MergeFrom(from.string_to_nested_);
  bool_to_string_.MergeFrom(from.bool_to_string_);
  int32_to_string_.MergeFrom(from.int32_to_string_);
  int64_to_string_.MergeFrom(from.int64_to_string_);
  uint32_to_string_.MergeFrom(from.uint32_to_string_);
  uint64_to_string_.MergeFrom(from.uint64_to_string_);
  sint32_to_string_.MergeFrom(from.sint32_to_string_);
  sint64_to_string_.MergeFrom(from.sint64_to_string_);
  // @@protoc_insertion_point(copy_constructor:tests.MapMessage)
}

void MapMessage::SharedCtor() {
  _cached_size_ = 0;
}

MapMessage::~MapMessage() {
  // @@protoc_insertion_point(destructor:tests.MapMessage)
  SharedDtor();
}

void MapMessage::SharedDtor() {
}

void MapMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapMessage::descriptor() {
  ::protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapMessage& MapMessage::default_instance() {
  ::protobuf_protobuf_5ftests_2eproto::InitDefaultsMapMessage();
  return *internal_default_instance();
}

MapMessage* MapMessage::New(::google::protobuf::Arena* arena) const {
  MapMessage* n = new MapMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tests.MapMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_to_string_.Clear();
  string_to_bool_.Clear();
  string_to_bytes_.Clear();
  string_to_int32_.Clear();
  string_to_int64_.Clear();
  string_to_uint32_.Clear();
  string_to_uint64_.Clear();
  string_to_sint32_.Clear();
  string_to_sint64_.Clear();
  string_to_float_.Clear();
  string_to_double_.Clear();
  string_to_enum_.Clear();
  string_to_nested_.Clear();
  bool_to_string_.Clear();
  int32_to_string_.Clear();
  int64_to_string_.Clear();
  uint32_to_string_.Clear();
  uint64_to_string_.Clear();
  sint32_to_string_.Clear();
  sint64_to_string_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tests.MapMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> string_to_string = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          MapMessage_StringToStringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_StringToStringEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&string_to_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToStringEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToStringEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bool> string_to_bool = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          MapMessage_StringToBoolEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_StringToBoolEntry_DoNotUse,
              ::std::string, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::std::string, bool > > parser(&string_to_bool_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToBoolEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> string_to_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          MapMessage_StringToBytesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_StringToBytesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&string_to_bytes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToBytesEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> string_to_int32 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          MapMessage_StringToInt32Entry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_StringToInt32Entry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&string_to_int32_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToInt32Entry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> string_to_int64 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          MapMessage_StringToInt64Entry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_StringToInt64Entry_DoNotUse,
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&string_to_int64_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToInt64Entry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, uint32> string_to_uint32 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          MapMessage_StringToUint32Entry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_StringToUint32Entry_DoNotUse,
              ::std::string, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 > > parser(&string_to_uint32_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToUint32Entry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, uint64> string_to_uint64 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          MapMessage_StringToUint64Entry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_StringToUint64Entry_DoNotUse,
              ::std::string, ::google::protobuf::uint64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 > > parser(&string_to_uint64_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToUint64Entry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, sint32> string_to_sint32 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          MapMessage_StringToSint32Entry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_StringToSint32Entry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_SINT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&string_to_sint32_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToSint32Entry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, sint64> string_to_sint64 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          MapMessage_StringToSint64Entry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_StringToSint64Entry_DoNotUse,
              ::std::string, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_SINT64,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 > > parser(&string_to_sint64_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToSint64Entry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> string_to_float = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          MapMessage_StringToFloatEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_StringToFloatEntry_DoNotUse,
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&string_to_float_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToFloatEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> string_to_double = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          MapMessage_StringToDoubleEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_StringToDoubleEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&string_to_double_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToDoubleEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tests.Enum> string_to_enum = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          ::google::protobuf::scoped_ptr<MapMessage_StringToEnumEntry_DoNotUse> entry(string_to_enum_.NewEntry());
          {
            ::std::string data;
            DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, &data));
            DO_(entry->ParseFromString(data));
            if (::tests::Enum_IsValid(*entry->mutable_value())) {
              (*mutable_string_to_enum())[entry->key()] =
                  static_cast< ::tests::Enum >(*entry->mutable_value());
            } else {
              mutable_unknown_fields()->AddLengthDelimited(12, data);
            }
          }
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            entry->key().data(), static_cast<int>(entry->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToEnumEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tests.Nested> string_to_nested = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          MapMessage_StringToNestedEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_StringToNestedEntry_DoNotUse,
              ::std::string, ::tests::Nested,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tests::Nested > > parser(&string_to_nested_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.StringToNestedEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<bool, string> bool_to_string = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          MapMessage_BoolToStringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_BoolToStringEntry_DoNotUse,
              bool, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< bool, ::std::string > > parser(&bool_to_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.BoolToStringEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, string> int32_to_string = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          MapMessage_Int32ToStringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_Int32ToStringEntry_DoNotUse,
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&int32_to_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.Int32ToStringEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, string> int64_to_string = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          MapMessage_Int64ToStringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_Int64ToStringEntry_DoNotUse,
              ::google::protobuf::int64, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::std::string > > parser(&int64_to_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.Int64ToStringEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, string> uint32_to_string = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          MapMessage_Uint32ToStringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_Uint32ToStringEntry_DoNotUse,
              ::google::protobuf::uint32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string > > parser(&uint32_to_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.Uint32ToStringEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, string> uint64_to_string = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          MapMessage_Uint64ToStringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_Uint64ToStringEntry_DoNotUse,
              ::google::protobuf::uint64, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string > > parser(&uint64_to_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.Uint64ToStringEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<sint32, string> sint32_to_string = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          MapMessage_Sint32ToStringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_Sint32ToStringEntry_DoNotUse,
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_SINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&sint32_to_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.Sint32ToStringEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<sint64, string> sint64_to_string = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          MapMessage_Sint64ToStringEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMessage_Sint64ToStringEntry_DoNotUse,
              ::google::protobuf::int64, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_SINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::std::string > > parser(&sint64_to_string_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tests.MapMessage.Sint64ToStringEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tests.MapMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tests.MapMessage)
  return false;
#undef DO_
}

void MapMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tests.MapMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> string_to_string = 1;
  if (!this->string_to_string().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToStringEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_string().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->string_to_string().begin();
          it != this->string_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->string_to_string().begin();
          it != this->string_to_string().end(); ++it) {
        entry.reset(string_to_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, bool> string_to_bool = 2;
  if (!this->string_to_bool().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToBoolEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_bool().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_bool().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->string_to_bool().begin();
          it != this->string_to_bool().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToBoolEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_bool_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToBoolEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->string_to_bool().begin();
          it != this->string_to_bool().end(); ++it) {
        entry.reset(string_to_bool_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, bytes> string_to_bytes = 3;
  if (!this->string_to_bytes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToBytesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_bytes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_bytes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->string_to_bytes().begin();
          it != this->string_to_bytes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToBytesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_bytes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToBytesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->string_to_bytes().begin();
          it != this->string_to_bytes().end(); ++it) {
        entry.reset(string_to_bytes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int32> string_to_int32 = 4;
  if (!this->string_to_int32().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToInt32Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_int32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_int32().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->string_to_int32().begin();
          it != this->string_to_int32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToInt32Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_int32_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToInt32Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->string_to_int32().begin();
          it != this->string_to_int32().end(); ++it) {
        entry.reset(string_to_int32_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int64> string_to_int64 = 5;
  if (!this->string_to_int64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToInt64Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_int64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_int64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->string_to_int64().begin();
          it != this->string_to_int64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToInt64Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_int64_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToInt64Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->string_to_int64().begin();
          it != this->string_to_int64().end(); ++it) {
        entry.reset(string_to_int64_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, uint32> string_to_uint32 = 6;
  if (!this->string_to_uint32().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToUint32Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_uint32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_uint32().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->string_to_uint32().begin();
          it != this->string_to_uint32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToUint32Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_uint32_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToUint32Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->string_to_uint32().begin();
          it != this->string_to_uint32().end(); ++it) {
        entry.reset(string_to_uint32_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, uint64> string_to_uint64 = 7;
  if (!this->string_to_uint64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToUint64Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_uint64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_uint64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->string_to_uint64().begin();
          it != this->string_to_uint64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToUint64Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_uint64_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToUint64Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->string_to_uint64().begin();
          it != this->string_to_uint64().end(); ++it) {
        entry.reset(string_to_uint64_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, sint32> string_to_sint32 = 8;
  if (!this->string_to_sint32().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToSint32Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_sint32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_sint32().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->string_to_sint32().begin();
          it != this->string_to_sint32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToSint32Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_sint32_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToSint32Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->string_to_sint32().begin();
          it != this->string_to_sint32().end(); ++it) {
        entry.reset(string_to_sint32_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, sint64> string_to_sint64 = 9;
  if (!this->string_to_sint64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToSint64Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_sint64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_sint64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->string_to_sint64().begin();
          it != this->string_to_sint64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToSint64Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_sint64_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToSint64Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->string_to_sint64().begin();
          it != this->string_to_sint64().end(); ++it) {
        entry.reset(string_to_sint64_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, float> string_to_float = 10;
  if (!this->string_to_float().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToFloatEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_float().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_float().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->string_to_float().begin();
          it != this->string_to_float().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToFloatEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_float_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToFloatEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->string_to_float().begin();
          it != this->string_to_float().end(); ++it) {
        entry.reset(string_to_float_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, double> string_to_double = 11;
  if (!this->string_to_double().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToDoubleEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_double().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_double().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->string_to_double().begin();
          it != this->string_to_double().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToDoubleEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_double_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToDoubleEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->string_to_double().begin();
          it != this->string_to_double().end(); ++it) {
        entry.reset(string_to_double_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .tests.Enum> string_to_enum = 12;
  if (!this->string_to_enum().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tests::Enum >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToEnumEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_enum().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_enum().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tests::Enum >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tests::Enum >::const_iterator
          it = this->string_to_enum().begin();
          it != this->string_to_enum().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToEnumEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_enum_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToEnumEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::tests::Enum >::const_iterator
          it = this->string_to_enum().begin();
          it != this->string_to_enum().end(); ++it) {
        entry.reset(string_to_enum_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .tests.Nested> string_to_nested = 13;
  if (!this->string_to_nested().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tests::Nested >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToNestedEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->string_to_nested().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_nested().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tests::Nested >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tests::Nested >::const_iterator
          it = this->string_to_nested().begin();
          it != this->string_to_nested().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToNestedEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_nested_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToNestedEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::tests::Nested >::const_iterator
          it = this->string_to_nested().begin();
          it != this->string_to_nested().end(); ++it) {
        entry.reset(string_to_nested_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<bool, string> bool_to_string = 14;
  if (!this->bool_to_string().empty()) {
    typedef ::google::protobuf::Map< bool, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.BoolToStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->bool_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->bool_to_string().size()]);
      typedef ::google::protobuf::Map< bool, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->bool_to_string().begin();
          it != this->bool_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_BoolToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(bool_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_BoolToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->bool_to_string().begin();
          it != this->bool_to_string().end(); ++it) {
        entry.reset(bool_to_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int32, string> int32_to_string = 15;
  if (!this->int32_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.Int32ToStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->int32_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->int32_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->int32_to_string().begin();
          it != this->int32_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_Int32ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(int32_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_Int32ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->int32_to_string().begin();
          it != this->int32_to_string().end(); ++it) {
        entry.reset(int32_to_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, string> int64_to_string = 16;
  if (!this->int64_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.Int64ToStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->int64_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->int64_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->int64_to_string().begin();
          it != this->int64_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_Int64ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(int64_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_Int64ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->int64_to_string().begin();
          it != this->int64_to_string().end(); ++it) {
        entry.reset(int64_to_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint32, string> uint32_to_string = 17;
  if (!this->uint32_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.Uint32ToStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->uint32_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->uint32_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->uint32_to_string().begin();
          it != this->uint32_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_Uint32ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(uint32_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            17, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_Uint32ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->uint32_to_string().begin();
          it != this->uint32_to_string().end(); ++it) {
        entry.reset(uint32_to_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            17, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint64, string> uint64_to_string = 18;
  if (!this->uint64_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.Uint64ToStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->uint64_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->uint64_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
          it = this->uint64_to_string().begin();
          it != this->uint64_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_Uint64ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(uint64_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            18, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_Uint64ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
          it = this->uint64_to_string().begin();
          it != this->uint64_to_string().end(); ++it) {
        entry.reset(uint64_to_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            18, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<sint32, string> sint32_to_string = 19;
  if (!this->sint32_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.Sint32ToStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->sint32_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->sint32_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->sint32_to_string().begin();
          it != this->sint32_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_Sint32ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sint32_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            19, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_Sint32ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->sint32_to_string().begin();
          it != this->sint32_to_string().end(); ++it) {
        entry.reset(sint32_to_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            19, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<sint64, string> sint64_to_string = 20;
  if (!this->sint64_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.Sint64ToStringEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->sint64_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->sint64_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->sint64_to_string().begin();
          it != this->sint64_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_Sint64ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sint64_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            20, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_Sint64ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->sint64_to_string().begin();
          it != this->sint64_to_string().end(); ++it) {
        entry.reset(sint64_to_string_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            20, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tests.MapMessage)
}

::google::protobuf::uint8* MapMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tests.MapMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> string_to_string = 1;
  if (!this->string_to_string().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToStringEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToStringEntry.value");
      }
    };

    if (deterministic &&
        this->string_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_string().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->string_to_string().begin();
          it != this->string_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->string_to_string().begin();
          it != this->string_to_string().end(); ++it) {
        entry.reset(string_to_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, bool> string_to_bool = 2;
  if (!this->string_to_bool().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToBoolEntry.key");
      }
    };

    if (deterministic &&
        this->string_to_bool().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_bool().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->string_to_bool().begin();
          it != this->string_to_bool().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToBoolEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_bool_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToBoolEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->string_to_bool().begin();
          it != this->string_to_bool().end(); ++it) {
        entry.reset(string_to_bool_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, bytes> string_to_bytes = 3;
  if (!this->string_to_bytes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToBytesEntry.key");
      }
    };

    if (deterministic &&
        this->string_to_bytes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_bytes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->string_to_bytes().begin();
          it != this->string_to_bytes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToBytesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_bytes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToBytesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->string_to_bytes().begin();
          it != this->string_to_bytes().end(); ++it) {
        entry.reset(string_to_bytes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int32> string_to_int32 = 4;
  if (!this->string_to_int32().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToInt32Entry.key");
      }
    };

    if (deterministic &&
        this->string_to_int32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_int32().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->string_to_int32().begin();
          it != this->string_to_int32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToInt32Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_int32_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToInt32Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->string_to_int32().begin();
          it != this->string_to_int32().end(); ++it) {
        entry.reset(string_to_int32_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, int64> string_to_int64 = 5;
  if (!this->string_to_int64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToInt64Entry.key");
      }
    };

    if (deterministic &&
        this->string_to_int64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_int64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->string_to_int64().begin();
          it != this->string_to_int64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToInt64Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_int64_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToInt64Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->string_to_int64().begin();
          it != this->string_to_int64().end(); ++it) {
        entry.reset(string_to_int64_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, uint32> string_to_uint32 = 6;
  if (!this->string_to_uint32().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToUint32Entry.key");
      }
    };

    if (deterministic &&
        this->string_to_uint32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_uint32().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->string_to_uint32().begin();
          it != this->string_to_uint32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToUint32Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_uint32_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToUint32Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
          it = this->string_to_uint32().begin();
          it != this->string_to_uint32().end(); ++it) {
        entry.reset(string_to_uint32_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, uint64> string_to_uint64 = 7;
  if (!this->string_to_uint64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToUint64Entry.key");
      }
    };

    if (deterministic &&
        this->string_to_uint64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_uint64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->string_to_uint64().begin();
          it != this->string_to_uint64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToUint64Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_uint64_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToUint64Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
          it = this->string_to_uint64().begin();
          it != this->string_to_uint64().end(); ++it) {
        entry.reset(string_to_uint64_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, sint32> string_to_sint32 = 8;
  if (!this->string_to_sint32().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToSint32Entry.key");
      }
    };

    if (deterministic &&
        this->string_to_sint32().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_sint32().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->string_to_sint32().begin();
          it != this->string_to_sint32().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToSint32Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_sint32_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToSint32Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->string_to_sint32().begin();
          it != this->string_to_sint32().end(); ++it) {
        entry.reset(string_to_sint32_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, sint64> string_to_sint64 = 9;
  if (!this->string_to_sint64().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToSint64Entry.key");
      }
    };

    if (deterministic &&
        this->string_to_sint64().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_sint64().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->string_to_sint64().begin();
          it != this->string_to_sint64().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToSint64Entry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_sint64_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToSint64Entry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
          it = this->string_to_sint64().begin();
          it != this->string_to_sint64().end(); ++it) {
        entry.reset(string_to_sint64_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, float> string_to_float = 10;
  if (!this->string_to_float().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToFloatEntry.key");
      }
    };

    if (deterministic &&
        this->string_to_float().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_float().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->string_to_float().begin();
          it != this->string_to_float().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToFloatEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_float_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToFloatEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->string_to_float().begin();
          it != this->string_to_float().end(); ++it) {
        entry.reset(string_to_float_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, double> string_to_double = 11;
  if (!this->string_to_double().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToDoubleEntry.key");
      }
    };

    if (deterministic &&
        this->string_to_double().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_double().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->string_to_double().begin();
          it != this->string_to_double().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToDoubleEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_double_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToDoubleEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->string_to_double().begin();
          it != this->string_to_double().end(); ++it) {
        entry.reset(string_to_double_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .tests.Enum> string_to_enum = 12;
  if (!this->string_to_enum().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tests::Enum >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToEnumEntry.key");
      }
    };

    if (deterministic &&
        this->string_to_enum().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_enum().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tests::Enum >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tests::Enum >::const_iterator
          it = this->string_to_enum().begin();
          it != this->string_to_enum().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToEnumEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_enum_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToEnumEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::tests::Enum >::const_iterator
          it = this->string_to_enum().begin();
          it != this->string_to_enum().end(); ++it) {
        entry.reset(string_to_enum_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .tests.Nested> string_to_nested = 13;
  if (!this->string_to_nested().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tests::Nested >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.StringToNestedEntry.key");
      }
    };

    if (deterministic &&
        this->string_to_nested().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->string_to_nested().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tests::Nested >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tests::Nested >::const_iterator
          it = this->string_to_nested().begin();
          it != this->string_to_nested().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_StringToNestedEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(string_to_nested_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_StringToNestedEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::tests::Nested >::const_iterator
          it = this->string_to_nested().begin();
          it != this->string_to_nested().end(); ++it) {
        entry.reset(string_to_nested_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<bool, string> bool_to_string = 14;
  if (!this->bool_to_string().empty()) {
    typedef ::google::protobuf::Map< bool, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< bool, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.BoolToStringEntry.value");
      }
    };

    if (deterministic &&
        this->bool_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->bool_to_string().size()]);
      typedef ::google::protobuf::Map< bool, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->bool_to_string().begin();
          it != this->bool_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_BoolToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(bool_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_BoolToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< bool, ::std::string >::const_iterator
          it = this->bool_to_string().begin();
          it != this->bool_to_string().end(); ++it) {
        entry.reset(bool_to_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int32, string> int32_to_string = 15;
  if (!this->int32_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.Int32ToStringEntry.value");
      }
    };

    if (deterministic &&
        this->int32_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->int32_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->int32_to_string().begin();
          it != this->int32_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_Int32ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(int32_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_Int32ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->int32_to_string().begin();
          it != this->int32_to_string().end(); ++it) {
        entry.reset(int32_to_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, string> int64_to_string = 16;
  if (!this->int64_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.Int64ToStringEntry.value");
      }
    };

    if (deterministic &&
        this->int64_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->int64_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->int64_to_string().begin();
          it != this->int64_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_Int64ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(int64_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_Int64ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->int64_to_string().begin();
          it != this->int64_to_string().end(); ++it) {
        entry.reset(int64_to_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint32, string> uint32_to_string = 17;
  if (!this->uint32_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.Uint32ToStringEntry.value");
      }
    };

    if (deterministic &&
        this->uint32_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->uint32_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->uint32_to_string().begin();
          it != this->uint32_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_Uint32ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(uint32_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       17, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_Uint32ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->uint32_to_string().begin();
          it != this->uint32_to_string().end(); ++it) {
        entry.reset(uint32_to_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       17, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint64, string> uint64_to_string = 18;
  if (!this->uint64_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.Uint64ToStringEntry.value");
      }
    };

    if (deterministic &&
        this->uint64_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->uint64_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
          it = this->uint64_to_string().begin();
          it != this->uint64_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_Uint64ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(uint64_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       18, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_Uint64ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
          it = this->uint64_to_string().begin();
          it != this->uint64_to_string().end(); ++it) {
        entry.reset(uint64_to_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       18, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<sint32, string> sint32_to_string = 19;
  if (!this->sint32_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.Sint32ToStringEntry.value");
      }
    };

    if (deterministic &&
        this->sint32_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->sint32_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->sint32_to_string().begin();
          it != this->sint32_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_Sint32ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sint32_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       19, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_Sint32ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->sint32_to_string().begin();
          it != this->sint32_to_string().end(); ++it) {
        entry.reset(sint32_to_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       19, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<sint64, string> sint64_to_string = 20;
  if (!this->sint64_to_string().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "tests.MapMessage.Sint64ToStringEntry.value");
      }
    };

    if (deterministic &&
        this->sint64_to_string().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->sint64_to_string().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->sint64_to_string().begin();
          it != this->sint64_to_string().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MapMessage_Sint64ToStringEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sint64_to_string_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       20, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMessage_Sint64ToStringEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
          it = this->sint64_to_string().begin();
          it != this->sint64_to_string().end(); ++it) {
        entry.reset(sint64_to_string_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       20, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tests.MapMessage)
  return target;
}

size_t MapMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tests.MapMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<string, string> string_to_string = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_string_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToStringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->string_to_string().begin();
        it != this->string_to_string().end(); ++it) {
      entry.reset(string_to_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, bool> string_to_bool = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_bool_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToBoolEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->string_to_bool().begin();
        it != this->string_to_bool().end(); ++it) {
      entry.reset(string_to_bool_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, bytes> string_to_bytes = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_bytes_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToBytesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->string_to_bytes().begin();
        it != this->string_to_bytes().end(); ++it) {
      entry.reset(string_to_bytes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, int32> string_to_int32 = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_int32_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToInt32Entry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->string_to_int32().begin();
        it != this->string_to_int32().end(); ++it) {
      entry.reset(string_to_int32_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, int64> string_to_int64 = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_int64_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToInt64Entry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->string_to_int64().begin();
        it != this->string_to_int64().end(); ++it) {
      entry.reset(string_to_int64_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, uint32> string_to_uint32 = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_uint32_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToUint32Entry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint32 >::const_iterator
        it = this->string_to_uint32().begin();
        it != this->string_to_uint32().end(); ++it) {
      entry.reset(string_to_uint32_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, uint64> string_to_uint64 = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_uint64_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToUint64Entry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::uint64 >::const_iterator
        it = this->string_to_uint64().begin();
        it != this->string_to_uint64().end(); ++it) {
      entry.reset(string_to_uint64_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, sint32> string_to_sint32 = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_sint32_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToSint32Entry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->string_to_sint32().begin();
        it != this->string_to_sint32().end(); ++it) {
      entry.reset(string_to_sint32_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, sint64> string_to_sint64 = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_sint64_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToSint64Entry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >::const_iterator
        it = this->string_to_sint64().begin();
        it != this->string_to_sint64().end(); ++it) {
      entry.reset(string_to_sint64_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, float> string_to_float = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_float_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToFloatEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->string_to_float().begin();
        it != this->string_to_float().end(); ++it) {
      entry.reset(string_to_float_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, double> string_to_double = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_double_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToDoubleEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->string_to_double().begin();
        it != this->string_to_double().end(); ++it) {
      entry.reset(string_to_double_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .tests.Enum> string_to_enum = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_enum_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToEnumEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::tests::Enum >::const_iterator
        it = this->string_to_enum().begin();
        it != this->string_to_enum().end(); ++it) {
      entry.reset(string_to_enum_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .tests.Nested> string_to_nested = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->string_to_nested_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_StringToNestedEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::tests::Nested >::const_iterator
        it = this->string_to_nested().begin();
        it != this->string_to_nested().end(); ++it) {
      entry.reset(string_to_nested_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<bool, string> bool_to_string = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->bool_to_string_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_BoolToStringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< bool, ::std::string >::const_iterator
        it = this->bool_to_string().begin();
        it != this->bool_to_string().end(); ++it) {
      entry.reset(bool_to_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, string> int32_to_string = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->int32_to_string_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_Int32ToStringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->int32_to_string().begin();
        it != this->int32_to_string().end(); ++it) {
      entry.reset(int32_to_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int64, string> int64_to_string = 16;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->int64_to_string_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_Int64ToStringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
        it = this->int64_to_string().begin();
        it != this->int64_to_string().end(); ++it) {
      entry.reset(int64_to_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, string> uint32_to_string = 17;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->uint32_to_string_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_Uint32ToStringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->uint32_to_string().begin();
        it != this->uint32_to_string().end(); ++it) {
      entry.reset(uint32_to_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint64, string> uint64_to_string = 18;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->uint64_to_string_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_Uint64ToStringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::std::string >::const_iterator
        it = this->uint64_to_string().begin();
        it != this->uint64_to_string().end(); ++it) {
      entry.reset(uint64_to_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<sint32, string> sint32_to_string = 19;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->sint32_to_string_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_Sint32ToStringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->sint32_to_string().begin();
        it != this->sint32_to_string().end(); ++it) {
      entry.reset(sint32_to_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<sint64, string> sint64_to_string = 20;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->sint64_to_string_size());
  {
    ::google::protobuf::scoped_ptr<MapMessage_Sint64ToStringEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::std::string >::const_iterator
        it = this->sint64_to_string().begin();
        it != this->sint64_to_string().end(); ++it) {
      entry.reset(sint64_to_string_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tests.MapMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MapMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tests.MapMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tests.MapMessage)
    MergeFrom(*source);
  }
}

void MapMessage::MergeFrom(const MapMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tests.MapMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  string_to_string_.MergeFrom(from.string_to_string_);
  string_to_bool_.MergeFrom(from.string_to_bool_);
  string_to_bytes_.MergeFrom(from.string_to_bytes_);
  string_to_int32_.MergeFrom(from.string_to_int32_);
  string_to_int64_.MergeFrom(from.string_to_int64_);
  string_to_uint32_.MergeFrom(from.string_to_uint32_);
  string_to_uint64_.MergeFrom(from.string_to_uint64_);
  string_to_sint32_.MergeFrom(from.string_to_sint32_);
  string_to_sint64_.MergeFrom(from.string_to_sint64_);
  string_to_float_.MergeFrom(from.string_to_float_);
  string_to_double_.MergeFrom(from.string_to_double_);
  string_to_enum_.MergeFrom(from.string_to_enum_);
  string_to_nested_.MergeFrom(from.string_to_nested_);
  bool_to_string_.MergeFrom(from.bool_to_string_);
  int32_to_string_.MergeFrom(from.int32_to_string_);
  int64_to_string_.MergeFrom(from.int64_to_string_);
  uint32_to_string_.MergeFrom(from.uint32_to_string_);
  uint64_to_string_.MergeFrom(from.uint64_to_string_);
  sint32_to_string_.MergeFrom(from.sint32_to_string_);
  sint64_to_string_.MergeFrom(from.sint64_to_string_);
}

void MapMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tests.MapMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMessage::CopyFrom(const MapMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tests.MapMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMessage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->string_to_nested())) return false;
  return true;
}

void MapMessage::Swap(MapMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapMessage::InternalSwap(MapMessage* other) {
  using std::swap;
  string_to_string_.Swap(&other->string_to_string_);
  string_to_bool_.Swap(&other->string_to_bool_);
  string_to_bytes_.Swap(&other->string_to_bytes_);
  string_to_int32_.Swap(&other->string_to_int32_);
  string_to_int64_.Swap(&other->string_to_int64_);
  string_to_uint32_.Swap(&other->string_to_uint32_);
  string_to_uint64_.Swap(&other->string_to_uint64_);
  string_to_sint32_.Swap(&other->string_to_sint32_);
  string_to_sint64_.Swap(&other->string_to_sint64_);
  string_to_float_.Swap(&other->string_to_float_);
  string_to_double_.Swap(&other->string_to_double_);
  string_to_enum_.Swap(&other->string_to_enum_);
  string_to_nested_.Swap(&other->string_to_nested_);
  bool_to_string_.Swap(&other->bool_to_string_);
  int32_to_string_.Swap(&other->int32_to_string_);
  int64_to_string_.Swap(&other->int64_to_string_);
  uint32_to_string_.Swap(&other->uint32_to_string_);
  uint64_to_string_.Swap(&other->uint64_to_string_);
  sint32_to_string_.Swap(&other->sint32_to_string_);
  sint64_to_string_.Swap(&other->sint64_to_string_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapMessage::GetMetadata() const {
  protobuf_protobuf_5ftests_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protobuf_5ftests_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tests

// @@protoc_insertion_point(global_scope)
